{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": 
	//	{
	//  	"scope": "javascript,typescript",
	//  	"prefix": "log",
	//  	"body": 
	// 		[
	//  		"console.log('$1');",
	//  		"$2"
	//  	],
	//  	"description": "Log output to console"
	// }
	// 탭은 \t으로 대체, "은 \"으로 대체 여러줄 + 말고 ,로 구분
	
	//java 맨 위
	"sysout" : 
	{
		"scope" : "java"
		,"prefix" : "sysout"
		,"body" :
		[
			"System.out.println(${1:value});"
		]
		,"description": "Print output to system"
	}

	,"java logger" : 
	{
		"scope" : "java"
		,"prefix" : "lger"
		,"body" :
		[
			"logger.debug(\"${1:value}: \" + ${1:value});"
		]
		,"description": "Print log debug to log"
	}

	,"put" :
	{
		"scope": "java"
		,"prefix": "puter"
		,"body": 
		[
			"${1:Map}.put(\"${2:key}\", ${2:value});"
		]
		,"description": "Put value to Map or like-thing"
	}

	,"get" :
	{
		"scope": "java"
		,"prefix": "geter"
		,"body": 
		[
			"${1:Map}.get(\"${2:key}\");"
		]
		,"description": "Get Map-like value"
	}

	,"new mav" :
	{
		"scope": "java"
		,"prefix": "publicmav"
		,"body": 
		[
			"@RequestMapping(value = \"${1:value}\")"
			,"public ModelAndView ${2:methodName}(CommandMap commandMap"
			,"\t,HttpServletRequest request"
			,"\t,HttpServletResponse response) throws Exception"
			,"{"
			,"\t//반환값 설정"
			,"\tModelAndView mav = new ModelAndView();"
			,"\t//파라미터 값 설정"
			,"\tMap<String, Object> paramMap = commandMap.getMap();"
			,""
			,"\tlogger.debug(\"초기 paramMap: \", paramMap);"
			,""
			,"\t/**"
			,"\t * REQUEST 설정"
			,"\t */"
			,"\trequest.setAttribute(\"paramMap\", paramMap);"
			,""
			,"\tlogger.debug(\"최종 paramMap: \", paramMap);"
			,""
			,"\t/**"
			,"\t * JSP 설정"
			,"\t */"
			,"\t mav.setViewName(\"${3:viewName}\");"
			,"\t"
			,"\t return mav;"
			,"}"
		]
		,"description": "type template modelAndView"
	}

	//html 맨 위
	,"Input hidden": 
	{
	 	"scope": "html"
	 	,"prefix": "inputhidden"
	 	,"body": 
		[
			"<input type=\"hidden\" name=\"${1:name}\" id=\"${1:name}\"\tvalue=\"${2:value}\">"
	 	]
	 	,"description": "input hidden value for delivery parameter"
	}
	,"choose": 
	{
	 	"scope": "html"
	 	,"prefix": "choser"
	 	,"body": 
		[
			"<!-- ${1:descChoose} -->"
			,"<c:choose>"
			,"\t<c:when test=\"${2:ifFirst}\">"
			,"\t\t${4:value}"
			,"\t</c:when>"
			,"\t<c:when test=\"${3:ifSecond}\">"
			,"\t\t${5:value}"
			,"\t</c:when>"
			,"\t<c:otherwise>"
			,"\t\t${6:value}"
			,"\t</c:otherwise>"
			,"</c:choose>"
	 	]
	 	,"description": "choose 2 way"
	}

	//javascript 맨 위
	,"imgInfo":
	{
		"scope": "javascript"
		,"prefix": "imgfo"
		,"body":
		[
			",new imgObj(\"${1:imgId}\",\"active\",\"start\",\"end\",\"${2:ur}\",\"${3:type}\")"
		]
		,"description": "type imgInfo using by skgs"
	}
	,"imgInfo2":
	{
		"scope": "javascript"
		,"prefix": "imgfo2"
		,"body":
		[
			",new imgObj(\"${1:imgId}\",\"active\",\"start\",\"aaa\",\"ur\",\"${3:type}\")"
			,",new imgObj(\"aaa\",\"active\",\"${1:start}\",\"end\",\"ur\",\"${3:type}\")"
		]
		,"description": "type imgInfo2 using by skgs"
	}
	,"imgInfo3":
	{
		"scope": "javascript"
		,"prefix": "imgfo3"
		,"body":
		[
			",new imgObj(\"${1:imgId}\",\"active\",\"start\",\"aaa\",\"ur\",\"${3:type}\")"
			,",new imgObj(\"aaa\",\"active\",\"${1:start}\",\"bbb\",\"ur\",\"${3:type}\")"
			,",new imgObj(\"bbb\",\"active\",\"aaa\",\"end\",\"lr\",\"${3:type}\")"
		]
		,"description": "type imgInfo3 using by skgs"
	}

	,"js logger":
	{
		"scope": "javascript"
		,"prefix": "conlger"
		,"body":
		[
			"console.log(${1:value});"
		]
		,"description": "logger"
	}


	//python 맨 위
	,"Function GCD": 
	{
	  	"scope": "python",
	  	"prefix": "defGCD",
	  	"body": 
		[
			"def calcGCD(n1, n2):"
			,"\t#0으로 나누어 떨어지면 b가 최대 공약수"
			,"\tif(n1 % n2 == 0):"
			,"\t\treturn n2"
			,"\t#아니면 b, a%b 로 다시 계산"
			,"\treturn calcGCD(n2, n1%n2)"
	  	],
	  	"description": "최대공약수 알고리즘"
	}
	,"Function LCM": 
	{
	  	"scope": "python",
	  	"prefix": "defLCM",
	  	"body": 
		[
			"def calcLCM(n1, n2):"
			,"\t#a,b의 최소공배수 = a*b / a,b의 최대공약수"
			,"\treturn int(n1*n2 / calcGCD(n1,n2))"
	  	],
	  	"description": "최소공배수 알고리즘, defGCD 필요"
	}
}